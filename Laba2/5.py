import math


# 1) Сколько различных кратчайших путей по линиям сетки ведут из левого нижнего угла в правый верхний
# угол прямоугольной сетки размером 16 клеток по горизонтали и 15 клеток по вертикали?

# Пусть R - Шаг вправо
# Пусть U - Шаг вверх
# Кратчайший путь из левого нижнего угла в правый верхний угол состоит из 16
# шагов вправо (R) и 15 шагов вверх (U).

# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
# Общая длина пути: 16+15=31 шаг.
#Количество различных путей равно количеству способов разместить 16
# шагов R (или 15 шагов U) в последовательности из 31 шага.
# C(31,16) = (31!/(16!*15!))

result_1 = math.comb(31, 16)


# 2) Сколько различных кратчайших путей по линиям сетки ведут из левого нижнего угла в правый верхний угол,
# если два вертикальных участка не могут идти подряд?

# Ограничение — никакие два шага вверх не могут идти подряд
# Оно означает, что в нашем слове никакие две буквы U не могут располагаться рядом
#Общее количество шагов: 16 R и 15 U.
#Чтобы шаги U не шли подряд, их нужно разместить между шагами R так,
# чтобы между любыми двумя U был хотя бы один R.

#Сначала разместим все 16 шагов R подряд:
#R R R R R R R R R R R R R R R R

# Если записать их подряд, то между ними и по краям можно в промежутки вставить символ U:
# _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _
# Чтобы буквы U никогда не шли подряд, в каждом промежутке можно вставить не более одной буквы U
# Нам нужно разместить 15 шагов U в 17 промежутков, выбрав 15 из них.

#формула: Количество путей  С(17,15)=(17!/(15!*2!))

# Таким образом, задача сводится к тому, чтобы выбрать 15 позиций из 17 возможных

result_2 = math.comb(17, 15)


print("Ответ 1:", result_1)
print("Ответ 2:", result_2)
